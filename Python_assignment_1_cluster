1)
p=input('Please choose to ADD(a)/MULTIPLY(m)/SUBTRACT(su)/DIVISION(d): ')

a1,b1=input('INPUT TWO NUMBERS:(a,b) ').split()
a1=int(a1)
b1=int(b1)
s=0

if p=='a':
    s=a1+b1
    print('{} + {}= {}'.format(a1,b1,s))
elif p=='m':
    s=a1*b1
    print('{} x {}= {}'.format(a1,b1,s))
elif p=='su':
    if a1>b1:
        s=a1-b1
        print('{} - {}= {}'.format(a1,b1,s))
    else:
        s=b1-a1
        print('{} - {}= {}'.format(a1,b1,s))
elif p=='d':
    if b1!=0:
        s=a1/b1
        print('{} / {}= {}'.format(a1,b1,s))

if s==0:
    print('It is not possible or anwer may be invalid')

2)
a1,b1,c1=input('INPUT TWO NUMBERS:(a,b) ').split()
a1=int(a1)
b1=int(b1)
c1=int(c1)

max=a1

if max<b1 or max<c1:
    if b1>c1:
        print('the greatest number is {}'.format(b1))
    else:
        print('the greatest number is {}'.format(c1))
else:
    print('the greatest number is {}'.format(a1))   

3)
a1=input('INPUT a NUMBER: ')

a1=int(a1)


if a1%2==0:
    print('{} is an even number'.format(a1))
else:
    print('{} is an odd number'.format(a1))

4)
a1=input('INPUT a NUMBER: ')

a1=int(a1)
count=0

for i in range(3,a1):
    if a1%i==0:
        count+=1
        break
if count==0:
    print('{} is a prime number'.format(a1))
else:
    print('{} is not a prime number'.format(a1))

5)
a)import sys

argList = sys.argv

for i in range(1,len(argList)):
    print(argList[i])

b)
import sys

argList = sys.argv

ma=argList[1]

if argList[2]>ma or argList[3]>ma:
    if argList[2]>argList[3]:
        ma=argList[2]
    else:
        ma=argList[3]

print('{} is the greatest of all numbers'.format(ma))

6)
a)
s=input('Enter the main string from which we will slice- ')

st,en=input("input the start and the end index you want to create substring of:- ").split()

st=int(st)
en=int(en)

if st<0:
    print('It is not a right index to start from')
elif en>len(s):
    print('The choosed index is greater than the number of character in the string')
else:
    nst=s[st:en]
    print("'{}' is the substring created".format(nst))

b)
s=input('Enter the main string from which we will slice- ')

print(s*100)

c)
l=input('Input your First Name: ')
m=input('Input your Second Name: ')

k=l+' '+m
print('Your name is {}'.format(k))

7)
lis=[]
print('Input 10 numbers for \n')
for i in range(10):
    k=input('Input a number:-')
    lis.append(k)

for i in range(10):
    print(int(lis[i]),end=' ')              #output of all the elements

print('\n')
a,b=input('Input an index from where to where you want to slice:-(a to b)').split()

a=int(a)
b=int(b)

k=list(lis[a-1:b])

print('{} is the new list '.format(k))              #the sliced list

rep=input('Please input the number to be repeated:-')

if rep in lis:
    print(rep*100)                                  #repetion of a number 100 times
else:
    print('The number is not in the list')                      

m=[222,65,11,54,99]
print('In built list is:- {}'.format(m))

nl=m+lis

print('The new list is:- {}'.format(nl))

8)
print('Input some numbers(>=10 numbers): ')
k=[]
for i in range(10):
    l=input('Insert Number: ')
    k.append(l)

tup=tuple(k)  #tupple is made from a list

for i in range(len(tup)):
    print(tup[i])


a,b=input('Input two index between which a new tupple will be formed: ').split()

a=int(a)
b=int(b)

m=tup[a-1:b]
print('{} is the new tupple'.format(m))
    
g=input('A number to be repeated 100 times: ')

if g in tup:
    print(g*100,end=' ')
else:
    print('Choose some other number as {} is not present'.format(g))

ne=(3,6,32,55,87,12)

print('In built Tuple is {} '.format(ne))

con=tup+ne
print('New tuple is: {}'.format(con))
 
9)
print('The first imaginary number:\n')

a=int(input('Input the real part: '))
b=int(input('Input the impaginary part: '))

z1=complex(a,b)
print(z1)

print('The second imaginary number:\n')

a=int(input('Input the real part: '))
b=int(input('Input the impaginary part: '))

z2=complex(a,b)
print(z2)

st=str(input('What operation you want to do?(Mul(m)\nDiv(d)\nAdd(ad)\nSub(su): '))

if st=='m':
    k=z1*z2
    print('{} x {} = {}'.format(z1,z2,k))
elif st=='ad':
    k=z1+z2
    print('{} + {} = {}'.format(z1,z2,k))
elif st=='d':
    k=z1/z2
    print('{} / {} = {}'.format(z1,z2,k))
elif st=='su':
    k=z1-z2
    print('{} - {} = {}'.format(z1,z2,k))

10)

print('The first imaginary number:\n')

a=int(input('Input the 1st number: '))
b=int(input('Input the 2nd number: '))

st=str(input('What operation you want to do?\n(Mul(m)\nDiv(d)\nAdd(ad)\nSub(su)\nMod(md)\nExp(ex)\nFloor Div(fld)): '))

if st=='m':
    k=a*b
    print('\n{} x {} = {}'.format(a,b,k))
elif st=='ad':
    k=a+b
    print('\n{} + {} = {}'.format(a,b,k))
elif st=='d':
    if b!=0:
        k=a/b
        print('\n{} / {} = {}'.format(a,b,k))
    else:
        print('\na/b and b cannot be = 0')
elif st=='su':
    k=z1-z2
    print('\n{} - {} = {}'.format(a,b,k))
elif st=='md':
    k=a%b
    print('\n{} % {} = {}'.format(a,b,k))
elif st=='ex':
    k=a**b
    print('\n{} ^ {} = {}'.format(a,b,k))
elif st=='fld':
    k=a//b
    print('\nFloor[{} / {}] = {}'.format(a,b,k))

11)

class bitwise_operation:
    def __init__(self,a,b):
        self.a=a
        self.b=b

    def And(self):
        k=self.a & self.b
        return k

    def Or(self):
        k=self.a|self.b
        return k

    def Xor(self):
        k=a^b
        return k

    def BOC(self,l):
        if l==0:
            k=(~self.a)
            return k
        else:
            k=(~self.b)
            return k
    def Bi_lS(self,i,l):
        if l==0:
            k=self.a<<i
            return k
        else:
            k=self.b<<i
            return k

    def Bi_rS(self,i,l):
        if l==0:
            k=self.a>>i
            return k
        else:
            k=self.b>>i
            return k

if __name__=="__main__":
    a=int(input("Input 1st number to make logical operations: "))
    b=int(input("Input 2nd number to make logical operations: "))
    p=int(input("INPUT A CHOICE\n1->AND\n2)OR\n3)XOR\n4)Binary One's Complement\n5)Binary Left Shift\n6)Binary Right Shift\n"))
    fun=bitwise_operation(a,b)
    if p==1:
        k=fun.And()
        print("{}&{}={}".format(a,b,k))
    elif p==2:
        k=fun.Or()
        print("{}|{}={}".format(a,b,k))
    elif p==3:
        k=fun.Xor()
        print("{}^{}={}".format(a,b,k))
    elif p==4:
        l=int(input("Which number you want to find Binary one's compliment?(1->a/2->b)?"))
        k=fun.BOC(l)
        if l==1:
            print("~{}={}".format(a,k))
        else:
            print("~{}={}".format(b,k))
    elif p==5:
        i=int(input("Number of bit to Left shift"))
        l=int(input("Which number you want to do Left shift(1->a/2->b)?"))
        fun.Bi_lS(i,l)
        if l==1:
            print("{}<<{}={}".format(a,k))
        else:
            print("{}<<{}={}".format(b,k))
    elif p==6:
        i=int(input("Number of bit to Right shift"))
        l=int(input("Which number you want to do Right shift(1->a/2->b)?"))
        fun.Bi_rS(i,l)
        if l==1:
            print("{}>>{}={}".format(a,k))
        else:
            print("{}>>{}={}".format(b,k))

12)

def find_avg():
    k=lis_ip()
    sum=0
    for i in range(len(k)):
        sum=sum+k[i]
    avg=sum/len(k)

    return avg,k

def lis_ip():
    k=[]
    print("Please enter 10 numbers:\n")
    for i in range(10):
        l=int(input())
        k.append(l)
    return k    

def find():
    count=0
    a,k=find_avg()
    for i in range(10):
        if k[i]>a:
            print("{} is more than {}(average)".format(k[i],a))
            count+=1
    print("Number of numbers less than average is {}".format(count))
    count=0
    for i in range(10):
        if k[i]<a:
            print("{} is less than {}(average)".format(k[i],a))
            count+=1
    print("Number of numbers less than average is {}".format(count))
    count=0
    for i in range(10):
        if k[i]==a:
            print("{} is equal to {}(average)".format(k[i],a))
            count+=1
    print("Number of numbers equal to average is {}".format(count))
    

if __name__=="__main__":
    find()
    
    
13)

def lis_ip():
    k=[]
    m=5                #5 or 4
    print("Please enter {} numbers:\n".format(m))
    for i in range(m):
        l=int(input())
        k.append(l)
    return k,m    

def find_max():
    p,m=lis_ip()
    mx=p[0]

    for i in range(1,m):
        if mx<p[i]:
            mx=p[i]
    print("{} is the max number.".format(mx))
    
if __name__=="__main__":
    find_max()
    
    
14)

def lis_ip():
    name=[]
    emp_id=[]
    m=int(input("Enter number of empployee to be entered:"))
    print("Please enter {} employee_name and empid collective consecutively:\n".format(m))
    for i in range(m):
        l=str(input("Name{}:".format(i+1)))
        name.append(l)
        k=str(input("Emp_id{}:".format(i+1)))
        emp_id.append(k)

    return name,emp_id,m

def prn_name(name,m):
    for i in range(m):
        print("{}\n".format(name[i]))

def print_name(k,name,emp_id):
    print("{}-{}\n".format(name[k-1],emp_id[k-1],k))

def print_name_4to9(name,emp_id):
    for i in range(4,10):
        print("{}-{}\n".format(name[i-1],emp_id[i-1]))

def print_name_from3rd(name,emp_id):
    for i in range(2,10):
        print("{}-{}\n".format(name[i],emp_id[i]))

def repeat_lis(name,r):
    for i in range(r):
        print("{}\n".format(name[i]))

def conc_lis(name,emp_id):
    print(name+emp_id)

def print_all(name,emp_id,m):
    for i in range(m):
        print("{}-{}\n".format(name[i],emp_id[i]))

        
if __name__=="__main__":
    a,b,c=lis_ip()
    prn_name(a,c)
    print("\n-----------------\n")
    l=int(input("Please enter a position which name you want to see:"))
    print_name(l,a,b)
    print("\n-----------------\n")
    print_name_4to9(a,b)
    print("\n-----------------\n")
    print_name_from3rd(a,b)
    print("\n-----------------\n")
    l=int(input("Please enter no of times want the name to see:"))
    repeat_lis(a,l)
    print("\n-----------------\n")
    conc_lis(a,b)
    print("\n-----------------\n")
    print_all(a,b,c)
    
    
15)

def lis_ip():
    name=[]
    print("Please enter 5 names :\n")
    for i in range(5):
        l=str(input("Name{}:".format(i+1)))
        name.append(l)
        
    return name

def find_name1(name,m):
    count=0
    for i in range(5):
        if m==name[i]:
            count+=1
            break
    if count==0:
        print("{} not found.\n".format(m))
    else:
        print("{} was found.\n".format(m))
            

def find_name2(name,m):
    if m in name:
        print("{} is present.\n".format(m))

def prn_nam(name):
    for i in reversed(range(5)):
        print("{}\n".format(name[i]))


              
a=lis_ip()
l=str(input("Please enter a name which is to be matched:"))
find_name1(a,l)
print("\n-----------------\n")
find_name2(a,l)
print("\n-----------------\n")
prn_nam(a)
            

16)


def prime_check(k):
    count=0
    for i in range(2,k):
        if k%i==0:
            count+=1
            break
    if count==0:
        print("{} is a prime number".format(k))
    else:
        print("{} is not a prime number".format(k))


def prime_ser_till(m):
    for i in range(3,m+1):
        count=0
        for j in range(2,i):
            if i%j==0:
                count+=1
        if count==0:
            print("{}\n".format(i))

            
if __name__=="__main__":
    l=int(input("Input the number to check whether prime or not:"))
    prime_check(l)
    print("\n---------------------\n")
    n=int(input("Number till prime is printed:"))
    prime_ser_till(n)
    
17)
def lis_ip():
    k=[]    
    print("Please enter 5 numbers:\n")
    for i in range(5):
        l=int(input())
        k.append(l)
    return k  

def find_max(p):
    mx=p[0]
    for i in range(5):
        if mx<p[i]:
            mx=p[i]
    print("{} is the max number.".format(mx))

def find_min(p):
    mi=p[0]    
    for i in range(5):
        if mi>p[i]:
            mi=p[i]
    print("{} is the max number.".format(mi))

    
if __name__=="__main__":
    p=lis_ip()
    find_max(p)
    find_min(p)


18)

for i in range(1,101):
    print(i)
print('\n---------------\n')
for i in reversed(range(1,101)):
    print(i)

a=1
while(a<=100):
    print(a)
    a+=1

a=100
while(a>=100):
    print(a)
    a-=1

myString="Hello World"
count=0

while myString[count]!=' ':
    count+=1
   
prt=myString[0:count]
print("{}".format(prt))

nxt=myString[count+1:len(myString)]
print("{}".format(nxt))

19)

def even_num():
    for i in range (1,101):
        if i%2!=0:
            continue
        print(i)

def brk_loop():
    for i in range (1,101):
        if i%2!=0:
            continue
        elif i>50:
            break
        print(i)

def cont_10_50():
    for i in range(1,101):
        if i%2!=0:
            continue
        elif i in [10,20,30,40,50]:
            continue
        print(i)

def cont_60_90():
    for i in range(1,101):
        if i%2!=0:
            continue
        elif i in [60,70,80,90]:
            continue
        print(i)

def brk_loop2():
    for i in range (1,101):
        if i%2!=0:
            continue
        elif i>90:
            break
        print(i)

    
if __name__=="__main__":
    even_num()
    print('\n-------------\n')
    brk_loop()
    print('\n------------------\n')
    cont_10_50()
    print('\n------------------\n')
    cont_60_90()
    print('\n------------------\n')
    brk_loop2()


20)

def fibonacci(k):
    a=0
    b=1
    c=0
    print(a)
    print(b)
    for i in range(k):
        c=a+b
        print("{} ".format(c))
        a=b
        b=c

def fibonacci_until(k):
    a=0
    b=1
    c=1
    if k>b:
        print(a)
        print(b)
        while c<k:
            print("{} ".format(c))
            c=a+b
            a=b
            b=c
    elif k<=b:
        print(a)
    

if __name__=="__main__":
    l=int(input("Enter a value for number of element in the fibonacci series:"))
    fibonacci(l)
    print('\n--------\n')
    l=int(input("Enter a value for number till the fibonacci series would last:"))
    fibonacci_until(l)


